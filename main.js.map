{"version":3,"file":"main.js","mappings":"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","sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/Patient/add-patient/add-patient.component.ts","./src/app/components/Patient/add-patient/add-patient.component.html","./src/app/components/Patient/edit-patient/edit-patient.component.ts","./src/app/components/Patient/edit-patient/edit-patient.component.html","./src/app/components/Patient/search-patient/search-patient.component.ts","./src/app/components/Patient/search-patient/search-patient.component.html","./src/app/components/Patient/view-patient/view-patient.component.ts","./src/app/components/Patient/view-patient/view-patient.component.html","./src/app/components/Staff/add-staff/add-staff.component.ts","./src/app/components/Staff/add-staff/add-staff.component.html","./src/app/components/Staff/viewedit-staff/viewedit-staff.component.ts","./src/app/components/Staff/viewedit-staff/viewedit-staff.component.html","./src/app/components/alert-page/alert-page.component.ts","./src/app/components/alert-page/alert-page.component.html","./src/app/components/alert/alert.component.ts","./src/app/components/alert/alert.component.html","./src/app/components/nav-bar/nav-bar.component.ts","./src/app/components/nav-bar/nav-bar.component.html","./src/app/services/alerts.service.ts","./src/app/services/categorymeasurement.service.ts","./src/app/services/password.service.ts","./src/app/services/patient-data.service.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AddPatientComponent } from './components/Patient/add-patient/add-patient.component';\r\nimport { EditPatientComponent } from './components/Patient/edit-patient/edit-patient.component';\r\nimport { SearchPatientComponent } from './components/Patient/search-patient/search-patient.component';\r\nimport { ViewPatientComponent } from './components/Patient/view-patient/view-patient.component';\r\nimport { AlertComponent } from './components/alert/alert.component';\r\nimport { AlertPageComponent } from './components/alert-page/alert-page.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: 'patient/search', pathMatch: 'full' },\r\n  { path: 'patient/add-patient', component: AddPatientComponent },\r\n  { path: 'patient/edit-patient/:id', component: EditPatientComponent },\r\n  { path: 'patient/view/:id', component: ViewPatientComponent },\r\n  { path: 'patient/search', component: SearchPatientComponent },\r\n  { path: 'alerts', component: AlertPageComponent }\r\n];\r\n\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {\r\n\r\n}\r\n","import { Component,OnInit } from '@angular/core';\r\nimport { NavigationService } from './services/navigation.service'\r\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\r\nimport { EditPatientComponent } from './components/Patient/edit-patient/edit-patient.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\n\r\nexport class AppComponent implements OnInit {\r\n\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(){\r\n  }\r\n\r\n}\r\n","<mat-sidenav-container>\r\n  <mat-sidenav mode=\"side\" opened>\r\n    <app-nav-bar></app-nav-bar>\r\n  </mat-sidenav>\r\n  <mat-sidenav-content><router-outlet></router-outlet></mat-sidenav-content>\r\n</mat-sidenav-container>\r\n\r\n\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppComponent } from './app.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { DatePipe } from '@angular/common';\r\n\r\nimport { NavBarComponent } from './components/nav-bar/nav-bar.component';\r\n\r\n\r\n\r\nimport { SearchPatientComponent } from './components/Patient/search-patient/search-patient.component';\r\nimport { AddPatientComponent } from './components/Patient/add-patient/add-patient.component';\r\nimport { ViewPatientComponent } from './components/Patient/view-patient/view-patient.component';\r\nimport { EditPatientComponent } from './components/Patient/edit-patient/edit-patient.component'\r\n\r\nimport { AddStaffComponent } from './components/Staff/add-staff/add-staff.component';\r\nimport { VieweditStaffComponent } from './components/Staff/viewedit-staff/viewedit-staff.component';\r\n\r\n//routing\r\nimport { AppRoutingModule } from './app-routing.module';\r\n\r\n//api module for http get put and post requests\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\n//Materials\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n//side nav\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\n//buttons\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\nimport { AlertPageComponent } from './components/alert-page/alert-page.component';\r\nimport { AlertComponent } from './components/alert/alert.component';\r\n\r\n\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavBarComponent,\r\n    SearchPatientComponent,\r\n    AddPatientComponent,\r\n    ViewPatientComponent,\r\n    EditPatientComponent,\r\n    AddStaffComponent,\r\n    VieweditStaffComponent,\r\n    AlertPageComponent,\r\n    AlertComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    AppRoutingModule,\r\n    MatSidenavModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n  ],\r\n  exports: [\r\n    NavBarComponent,\r\n    CommonModule\r\n  ],\r\n  providers: [DatePipe],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormControl, EmailValidator, FormArray } from '@angular/forms'\r\n\r\n//api data services\r\n//patient interface\r\nimport { addPatientModel, patient, IgenPasswordPatient, patientCategory, patientMeasurement } from '../../../models/patient.model'\r\nimport { Router } from '@angular/router';\r\nimport { PatientDataService } from 'src/app/services/patient-data.service';\r\n//Password service\r\nimport { PasswordService } from 'src/app/services/password.service';\r\n//category measurement service to convert form into an Object for the database\r\nimport { CategorymeasurementService } from 'src/app/services/categorymeasurement.service';\r\nimport { category } from 'src/app/models/category.model';\r\nimport { measurementCategory } from 'src/app/models/measurement.model';\r\nimport { stringify } from '@angular/compiler/src/util';\r\n\r\n@Component({\r\n  selector: 'app-add-patient',\r\n  templateUrl: './add-patient.component.html',\r\n  styleUrls: ['./add-patient.component.scss']\r\n})\r\n\r\nexport class AddPatientComponent implements OnInit {\r\n\r\n  frequencies: number[] = [1, 7, 14, 28, 30, 60, 90, 365];\r\n  //todo make the forms into a form array using reactive forms\r\n  patientInformationForm: FormGroup;\r\n  patientMeasurementsForm: FormGroup = new FormGroup({});\r\n  patientCategoriesForm: FormGroup = new FormGroup({});\r\n  patientObject: addPatientModel;\r\n  patient: patient;\r\n  password: string;\r\n  // patientCategory:patientCategory[];\r\n  // patientMeasurement:patientMeasurement[];\r\n\r\n  //--------- category measurements variables\r\n  categories: category[] = [];\r\n  measurements: measurementCategory[] = [];\r\n\r\n\r\n  /* TODO Refactor this.\r\n\r\n  AddPatientResponse\r\n  {\r\n    bool successfuly;\r\n    string errorMessage?;\r\n  }\r\n\r\n  That way we ngIf once to check if its unsuccesful and fill in the error message\r\n  Right now we have 3 bools and an ngIfs for each\r\n  */\r\n\r\n  isPatientCreated: boolean;\r\n  isPatientExists = false;\r\n  isPatientFormComplete = true;\r\n  isIPC = false;\r\n\r\n  constructor(public patientDataService: PatientDataService, public route: Router,\r\n    public passwordService: PasswordService,\r\n    public categoryMeasurementService: CategorymeasurementService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initializeForm();\r\n    //todo get all the data you need once from patient categories and patient measurements\r\n\r\n  }\r\n\r\n  // custom validations in form builder example phone email ect\r\n  initializeForm(): void {\r\n    this.categoryMeasurementService.getCategories()\r\n      .subscribe(data => {\r\n        //data for html\r\n        this.categories = data;\r\n        //formGroup builder for measurements\r\n        this.patientCategoriesForm = this.categoryMeasurementService.toFormGroupCategory(data);\r\n\r\n        //at the moment IPC default is true so this will get the measurements for ipc\r\n        this.onChange();\r\n      })\r\n\r\n    this.patientInformationForm = new FormGroup({\r\n      title: new FormControl('Mr', Validators.required),\r\n      urNumber: new FormControl('123', Validators.required),\r\n      givenName: new FormControl('Test', Validators.required),\r\n      familyName: new FormControl('Fake', Validators.required),\r\n      gender: new FormControl('Male', Validators.required),\r\n      dob: new FormControl('2020-05-01', Validators.required),\r\n      countryOfBirth: new FormControl('Here', Validators.required),\r\n      preferredLanguage: new FormControl('English', Validators.required),\r\n      email: new FormControl('test@example.com', [Validators.required, Validators.email]),\r\n      password: new FormControl(''),\r\n      address: new FormControl('fake st', Validators.required),\r\n      suburb: new FormControl('ringwood', Validators.required),\r\n      postcode: new FormControl('3134', Validators.required),\r\n      mobileNumber: new FormControl('1234567890', Validators.required),\r\n      homeNumber: new FormControl('1234567890', Validators.required),\r\n      livesAlone: new FormControl(false),\r\n      active: new FormControl(true),\r\n      //patientCategory\r\n      //patientMeasurement\r\n    });\r\n\r\n\r\n\r\n  }\r\n\r\n  onSubmit(): void {\r\n    this.isPatientCreated = null;\r\n    this.isPatientExists = null;\r\n    this.isPatientFormComplete = null;\r\n\r\n    // let output = this.categoryMeasurementService.getCurrentMeasurments()\r\n    // If Valid\r\n    ///TODO NULL CHECK HERE!\r\n    if (this.patientInformationForm.valid && this.patientMeasurementsForm.valid && this.patientCategoriesForm.valid) {\r\n\r\n      //Create Default password or password admin enters\r\n      let passwordObject: IgenPasswordPatient = {\r\n        \"givenName\": this.patientInformationForm.value.givenName,\r\n        \"familyName\": this.patientInformationForm.value.familyName,\r\n        \"dob\": this.patientInformationForm.value.dob,\r\n        \"formPassword\": this.patientInformationForm.value.password\r\n      }\r\n\r\n      //assigns password to password var\r\n      this.password = this.passwordService.generateDefaultPassword(passwordObject);\r\n\r\n      //assigns values from form to patient object\r\n      this.patient = {\r\n        \"title\": this.patientInformationForm.value.title,\r\n        \"urnumber\": this.patientInformationForm.value.urNumber.toString(),\r\n        \"firstName\": this.patientInformationForm.value.givenName,\r\n        \"surName\": this.patientInformationForm.value.familyName,\r\n        \"gender\": this.patientInformationForm.value.gender,\r\n        \"dob\": this.patientInformationForm.value.dob,\r\n        \"countryOfBirth\": this.patientInformationForm.value.countryOfBirth,\r\n        \"preferredLanguage\": this.patientInformationForm.value.preferredLanguage,\r\n        \"email\": this.patientInformationForm.value.email,\r\n        \"password\": this.password,\r\n        \"address\": this.patientInformationForm.value.address,\r\n        \"suburb\": this.patientInformationForm.value.suburb,\r\n        \"postCode\": this.patientInformationForm.value.postcode,\r\n        \"mobileNumber\": this.patientInformationForm.value.mobileNumber,\r\n        \"homeNumber\": this.patientInformationForm.value.homeNumber,\r\n        \"livesAlone\": this.patientInformationForm.value.livesAlone,\r\n        \"active\": this.patientInformationForm.value.active,\r\n        \"registeredBy\": 1\r\n      }\r\n\r\n      //password object to display in FE\r\n      //todo add timer so it disapears after a specific time\r\n      this.password = `Email: ${this.patient.email} Password generated: ${this.password}`;\r\n\r\n      //Function that creates the patient object this will be sent to the Backend\r\n      this.patientObject = this.categoryMeasurementService\r\n        .createPatientObject(this.patient, this.patientCategoriesForm.value, this.patientMeasurementsForm.value)\r\n      console.log(this.patientCategoriesForm.value)\r\n      console.log(this.patientMeasurementsForm.value)\r\n      console.log(this.patientObject)\r\n\r\n      //if category IPC is selected\r\n      if (Object.values(this.patientCategoriesForm.value)[0]) {\r\n        this.patientDataService\r\n          .addPatient(this.patientObject)\r\n          .subscribe(\r\n            (response) => {\r\n              if (response != false) {\r\n                this.isIPC = false; this.isPatientExists = false;\r\n                this.isPatientFormComplete = true;\r\n                this.isPatientCreated = true;\r\n                this.patientInformationForm.reset();\r\n                this.patientCategoriesForm.reset(); this.patientMeasurementsForm.reset();\r\n              }\r\n            },\r\n            (error) => {\r\n              console.log(error)\r\n\r\n              //if error is related to The backend returned an unsuccessful response code alert that patient already exists\r\n              error == false ? this.isPatientExists = true : this.isPatientExists = false;\r\n              this.isIPC = false; this.isPatientFormComplete = true;\r\n            }\r\n\r\n          );\r\n        //if category ipc is not selected\r\n      } else if (!Object.values(this.patientCategoriesForm.value)[0]) {\r\n        this.isIPC = true;\r\n        this.isPatientFormComplete = true;\r\n        this.isPatientExists = false;\r\n\r\n      }\r\n\r\n    } else {\r\n      this.isPatientCreated = false;\r\n      this.isPatientFormComplete = false;\r\n      this.isPatientExists = false;\r\n    }\r\n  }\r\n\r\n  onChange(): void {\r\n    this.categoryMeasurementService.getCategoryMeasurements(this.patientCategoriesForm.value)\r\n      .subscribe(data => {\r\n        this.measurements = data;\r\n        this.patientMeasurementsForm = this.categoryMeasurementService.toFormGroupMeasurement(data, this.patientMeasurementsForm.value);\r\n\r\n      })\r\n  }\r\n\r\n  onCancel() {\r\n    this.route.navigate([`patient/search`])\r\n  }\r\n\r\n  selectAll() {\r\n    //todo\r\n\r\n    // isAllSelected() {\r\n    //   this.isMasterSel = this.categoryList.every(function(item:any) {\r\n    //       return item.isSelected == true;\r\n    //     })\r\n    //   this.getCheckedItemList();\r\n    // }\r\n  }\r\n\r\n\r\n\r\n}\r\n","<div class=\"container\">\r\n\r\n    <div class=\"success\" *ngIf=\"isPatientCreated === true\">\r\n        <div></div>\r\n        <div class=\"alert-container\">\r\n            <img class=\"alert-icon\" src=\"../../../assets/Images/checkmark.png\">\r\n        </div>\r\n        <div>\r\n            <h3>Success</h3>\r\n            <h5>Successfully added a patient!</h5>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"fail\" *ngIf=\"isPatientExists\">\r\n        <div></div>\r\n        <div class=\"alert-container\">\r\n            <img class=\"alert-icon\" src=\"../../../assets/Images/Exclamation1.png\">\r\n        </div>\r\n        <div>\r\n            <h3>Unsuccesful</h3>\r\n            <h5>Hospital number is already taken!</h5>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"fail\" *ngIf=\"isIPC\">\r\n        <div></div>\r\n        <div class=\"alert-container\">\r\n            <img class=\"alert-icon\" src=\"../../../assets/Images/Exclamation1.png\">\r\n        </div>\r\n        <div>\r\n            <h3>Unsuccesful</h3>\r\n            <h5>Patient must be assigned to Indwelling Pleural Catheter Category</h5>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"fail\" *ngIf=\"isPatientFormComplete == false\">\r\n        <div></div>\r\n        <div class=\"alert-container\">\r\n            <img class=\"alert-icon\" src=\"../../../assets/Images/Exclamation1.png\">\r\n        </div>\r\n        <div>\r\n            <h3>Unsuccesful</h3>\r\n            <h5>Please check the highlighted fields.</h5>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- <div class=\"heading\"><b>Add Patient</b></div> -->\r\n    <!-- ------ because this title is removed, margin is added to patient info boxes.------- -->\r\n\r\n    <div class=\"flex-row\">\r\n        <div class=\"patient-information\">\r\n            <div class=\"heading-2\">Patient Information</div>\r\n            <form class=\"outlined\" [formGroup]=\"patientInformationForm\" (ngSubmit)=\"onSubmit()\" autocomplete=\"off\">\r\n                <div><br></div> <!-- quick hack to add space -->\r\n                <div>\r\n                    <label>Title</label>\r\n                    <select formControlName=\"title\">\r\n                        <!-- (change)=\"selectTitle($event)\" -->\r\n                        <option>Mr</option>\r\n                        <option>Mrs</option>\r\n                        <option>Dr</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label for=\"hospital-number\">Hospital Number</label>\r\n                    <input id=\"hospital-number\" type=\"number\" formControlName=\"urNumber\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"given-name\">Given Name</label>\r\n                    <input id=\"given-name\" type=\"search\" formControlName=\"givenName\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"family-name\">Family Name</label>\r\n                    <input id=\"family-name\" type=\"search\" formControlName=\"familyName\">\r\n                </div>\r\n                <div>\r\n                    <label>Gender</label>\r\n                    <select formControlName=\"gender\">\r\n                        <option>Male</option>\r\n                        <option>Female</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label for=\"dob\">D.O.B</label>\r\n                    <input id=\"dob\" type=\"date\" placeholder=\"DD/MM/YYYY\" formControlName=\"dob\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"country-of-birth\">Country of Birth</label>\r\n                    <select formControlName=\"countryOfBirth\">\r\n                        <option>Here</option>\r\n                        <option>There</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Preferred Language</label>\r\n                    <select formControlName=\"preferredLanguage\">\r\n                        <option>English</option>\r\n                        <option>Gibberish</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label for=\"email\">Email</label>\r\n                    <input id=\"email\" type=\"email\" formControlName=\"email\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"password\">Password</label>\r\n                    <input id=\"password\" type=\"text\" placeholder=\"Default (Initals and DOB)\" formControlName=\"password\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"street-address\">Street Address</label>\r\n                    <input id=\"street-address\" type=\"text\" formControlName=\"address\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"suburb\">Suburb</label>\r\n                    <input id=\"suburb\" type=\"text\" formControlName=\"suburb\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"postcode\">Postcode</label>\r\n                    <input id=\"postcode\" type=\"text\" pattern=\"[0-9]{4}\" formControlName=\"postcode\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"mobile\">Mobile</label>\r\n                    <input id=\"mobile\" type=\"text\" pattern=\"[0-9]{10}\" formControlName=\"mobileNumber\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"home\">Home Phone</label>\r\n                    <input id=\"home\" type=\"text\" pattern=\"[0-9]{10}\" formControlName=\"homeNumber\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"lives-alone\">Lives Alone</label>\r\n                    <input id=\"lives-alone\" type=\"checkbox\" formControlName=\"livesAlone\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"active\">Active</label>\r\n                    <input id=\"active\" type=\"checkbox\" formControlName=\"active\">\r\n                </div>\r\n                <p style=\"margin-left: 40%;\">{{password}}</p>\r\n                <!-- <div>\r\n              <label>Deceased</label>\r\n              <input type=\"checkbox\" formControlName=\"deceased\">\r\n          </div> -->\r\n                <div><br></div> <!-- quick hack to add space -->\r\n            </form>\r\n        </div>\r\n\r\n        <div class=\"categories-measurements\">\r\n\r\n            <div class=\"heading-2\">Patient Categories</div>\r\n            <div class=\"flex-col\">\r\n                <form class=\"outlined\" [formGroup]=\"patientCategoriesForm\" (ngSubmit)=\"onSubmit()\" autocomplete=\"off\">\r\n                    <div class=\"categories\">\r\n                        <div class=\"outlined\">\r\n                            <!-- source: https://www.youtube.com/watch?v=PUcfqRBSgWo&ab_channel=AchiRajuBalla -->\r\n\r\n                            <div *ngFor=\"let item of categories\">\r\n                                <div style=\"color: red; padding-top: 0.2rem; margin:10px;\" *ngIf=\"patientCategoriesForm.hasError('required', '1') && item.categoryID == '1'\">\r\n                                    Required\r\n                                  </div>\r\n                                <input id=\"{{item.categoryID}}\" type=\"checkbox\" (change)=\"onChange()\" formControlName=\"{{item.categoryID}}\">\r\n                                <label for=\"{{item.categoryID}}\" style=\"width: auto;\" (change)=\"onChange()\">{{item.categoryName}}</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                <!-- TODO need to add the form groups here to get the values form the checkboxes -->\r\n                <div class=\"measurements\">\r\n                    <div class=\"heading-2\">Patient Measurements</div>\r\n\r\n                    <div class=\"outlined\">\r\n                        <div class=\"measurement-group\">\r\n                            <form class=\"outlined category-measurements-container\" [formGroup]=\"patientMeasurementsForm\"\r\n                                (ngSubmit)=\"onSubmit()\" autocomplete=\"off\">\r\n                                <div *ngFor=\"let category of categories\">\r\n                                    <div class=\"measurement-div\">\r\n                                        <div class=\"heading-4\"><b>{{category.categoryName}}</b></div>\r\n                                        <div class=\"heading-4\"><b>Frequency</b></div>\r\n                                    </div>\r\n\r\n                                    <!-- todo implement select all -->\r\n                                    <!-- <div>\r\n                                        Select All\r\n                                    </div> -->\r\n\r\n                                    <div class=\"selection-offset-div\" *ngFor=\"let measurement of measurements\">\r\n                                        <div *ngIf=\"measurement.categoryID == category.categoryID\"\r\n                                            class=\"measurement-div\">\r\n                                            <div style=\"width:200px;\">\r\n                                                <div style=\"color: red; padding-top: 0.2rem;\" *ngIf=\"patientMeasurementsForm.hasError('required', 'measurementID_4_CategoryID_1') && measurement.measurementID == '4'\">\r\n                                                    Required\r\n                                                  </div>\r\n                                                <!-- todo fix this hack surely there is a better way lol  -->\r\n                                                <input type=\"checkbox\" id=\"measurementID_{{measurement.measurementID}}_CategoryID_{{category.categoryID}}\"\r\n                                                    formControlName=\"measurementID_{{measurement.measurementID}}_CategoryID_{{category.categoryID}}\">\r\n\r\n                                                <label for=\"measurementID_{{measurement.measurementID}}_CategoryID_{{category.categoryID}}\" style=\"width: auto;\">{{measurement.measurementName}}</label>\r\n                                            </div>\r\n                                            <select\r\n                                                formControlName=\"measurementID_{{measurement.measurementID}}_CategoryID_{{category.categoryID}}freq\">\r\n                                                <option *ngFor=\"let frequency of frequencies\" [ngValue]=\"frequency\">\r\n                                                    {{frequency}}</option>\r\n                                            </select>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"button-container\">\r\n        <button class=\"buttonCancel\" type=\"button\" (click)=\"onCancel()\">Cancel</button>\r\n        <button class=\"button-submit\" type=\"button\" (click)=\"onSubmit()\">Add Patient</button>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\r\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\r\nimport { Location } from '@angular/common'\r\nimport { CategorymeasurementService } from 'src/app/services/categorymeasurement.service';\r\nimport { measurement, measurementCategory } from 'src/app/models/measurement.model';\r\nimport { PatientDataService } from 'src/app/services/patient-data.service';\r\nimport { editPatientModel } from 'src/app/models/patient.model';\r\nimport { query } from '@angular/animations';\r\nimport { pairs } from 'rxjs';\r\nimport { category } from 'src/app/models/category.model';\r\n\r\n@Component({\r\n  selector: 'app-edit-patient',\r\n  templateUrl: './edit-patient.component.html',\r\n  styleUrls: ['./edit-patient.component.scss']\r\n})\r\nexport class EditPatientComponent implements OnInit {\r\n\r\n  titles: any = ['Mr', 'Mrs', 'Dr']\r\n  genders: any = ['Male', 'Female']\r\n  countryOfBirths: any = ['Here', 'There']\r\n  preferredLanguages: any = ['English', 'Gibberish']\r\n  currentPatientId:any;\r\n  patient: editPatientModel;\r\n  passwordChangedOutput: string;\r\n  frequencies: number[] = [1, 7, 14, 28, 30, 60, 90, 365];\r\n\r\n  currentMeasurements: any = [];\r\n\r\n  patientInformationEditForm: FormGroup = new FormGroup({\r\n    title: new FormControl('', Validators.required),\r\n      urNumber: new FormControl('', Validators.required),\r\n      givenName: new FormControl('', Validators.required),\r\n      familyName: new FormControl('', Validators.required),\r\n      gender: new FormControl('', Validators.required),\r\n      dob: new FormControl('', Validators.required),\r\n      countryOfBirth: new FormControl('', Validators.required),\r\n      preferredLanguage: new FormControl('', Validators.required),\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl(''),\r\n      address: new FormControl('', Validators.required),\r\n      suburb: new FormControl('', Validators.required),\r\n      postcode: new FormControl('', Validators.required),\r\n      mobileNumber: new FormControl('', Validators.required),\r\n      homeNumber: new FormControl('', Validators.required),\r\n      livesAlone: new FormControl(false),\r\n      active: new FormControl(false),\r\n  });\r\n  patientMeasurementsForm: FormGroup = new FormGroup({});\r\n  patientCategoriesForm: FormGroup = new FormGroup({});\r\n\r\n  //--------- category measurements variables\r\n  categories: category[] = [];\r\n  measurements: measurementCategory[] = [];\r\n\r\n  success:boolean = false;\r\n  fail:boolean = false;\r\n  isPatient:boolean = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private router:Router,\r\n    private activeRoute: ActivatedRoute,\r\n    public patientdataServie: PatientDataService,\r\n    public categoryMeasurementService: CategorymeasurementService,\r\n    private location: Location\r\n    )\r\n     {\r\n      this.activeRoute.params.subscribe(params => {\r\n      this.currentPatientId = params.id\r\n\r\n      })\r\n    }\r\n\r\n  async ngOnInit(): Promise<void>{\r\n    this.patientdataServie.editPatientGet(this.currentPatientId)\r\n    .then(\r\n      (data: any) => {\r\n        this.patient = data;\r\n        this.initializeForm(this.patient);\r\n\r\n      }\r\n    )\r\n  }\r\n\r\n  initializeForm(patient: editPatientModel): void {\r\n\r\n//---------------- converting dob so that it can be displayed --------------------//\r\n    let query: RegExp = /\\d\\d\\d\\d-\\d\\d-\\d\\d/g\r\n    let dob: string = patient.patient.dob.toString()\r\n    dob = dob.match(query)[0]\r\n\r\n//----------------------- Getting all Categories from the database ----------------------//\r\n    this.categoryMeasurementService.getCategories()\r\n      .subscribe(data => {      \r\n        //data for html\r\n        this.categories = data;\r\n        //formGroup builder for measurements if not set default freq is set and checkbox set to false\r\n        this.patientCategoriesForm = this.categoryMeasurementService.toFormGroupPatientCategories(data, this.patient.patientCategories);\r\n     \r\n\r\n//------------------------------- gets the patients measurements -----------------------------------//\r\n        this.onChange();\r\n      }) \r\n\r\n    // get values for patient personal information\r\n    this.patientInformationEditForm = new FormGroup({\r\n      title: new FormControl(patient.patient.title, Validators.required),\r\n      urNumber: new FormControl(patient.patient.urnumber, Validators.required),\r\n      givenName: new FormControl(patient.patient.firstName, Validators.required),\r\n      familyName: new FormControl(patient.patient.surName, Validators.required),\r\n      gender: new FormControl(patient.patient.gender, Validators.required),\r\n      dob: new FormControl(dob, Validators.required),\r\n      countryOfBirth: new FormControl(patient.patient.countryOfBirth, Validators.required),\r\n      preferredLanguage: new FormControl(patient.patient.preferredLanguage, Validators.required),\r\n      email: new FormControl(patient.patient.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(''),\r\n      address: new FormControl(patient.patient.address, Validators.required),\r\n      suburb: new FormControl(patient.patient.suburb, Validators.required),\r\n      postcode: new FormControl(patient.patient.postCode, Validators.required),\r\n      mobileNumber: new FormControl(patient.patient.mobileNumber, Validators.required),\r\n      homeNumber: new FormControl(patient.patient.homeNumber, Validators.required),\r\n      livesAlone: new FormControl(patient.patient.livesAlone),\r\n      active: new FormControl(patient.patient.active),\r\n    });\r\n  }\r\n\r\n\r\n  onChange(): void {\r\n    //get all the categoryMeasurements in the DB\r\n    this.categoryMeasurementService.getCategoryMeasurements(this.patientCategoriesForm.value)\r\n      .subscribe(data => {        \r\n        //assigns measurements\r\n        this.measurements = data;\r\n        //Creates Formgroups and form controls         \r\n        //assigns the formgroup to variable\r\n        this.patientMeasurementsForm = this.categoryMeasurementService.toFormGroupPatientMeasurements(this.measurements,this.patient.patientMeasurements,this.patientMeasurementsForm.value)\r\n      })\r\n\r\n  }\r\n\r\n  onSubmit():void{\r\n    this.isPatient = false\r\n    this.success = this.fail = false;\r\n    \r\n    // If Valid\r\n    if (this.patientInformationEditForm.valid && this.patientCategoriesForm.valid) {\r\n      // console.log(this.patientInformationEditForm.value)\r\n      // this.success = true;\r\n      // this.patientInformationEditForm.reset();\r\n      // console.log(this.patientInformationEditForm.value)\r\n\r\n      //creates the patient details that will be sent to the API\r\n      this.patient.patient = {\r\n        \"title\": this.patientInformationEditForm.value.title,\r\n        \"urnumber\": this.patientInformationEditForm.value.urNumber.toString(),\r\n        \"firstName\": this.patientInformationEditForm.value.givenName,\r\n        \"surName\": this.patientInformationEditForm.value.familyName,\r\n        \"gender\": this.patientInformationEditForm.value.gender,\r\n        \"dob\": this.patientInformationEditForm.value.dob,\r\n        \"countryOfBirth\": this.patientInformationEditForm.value.countryOfBirth,\r\n        \"preferredLanguage\": this.patientInformationEditForm.value.preferredLanguage,\r\n        \"email\": this.patientInformationEditForm.value.email,\r\n        \"password\": this.patientInformationEditForm.value.password,\r\n        \"address\": this.patientInformationEditForm.value.address,\r\n        \"suburb\": this.patientInformationEditForm.value.suburb,\r\n        \"postCode\": this.patientInformationEditForm.value.postcode,\r\n        \"mobileNumber\": this.patientInformationEditForm.value.mobileNumber,\r\n        \"homeNumber\": this.patientInformationEditForm.value.homeNumber,\r\n        \"livesAlone\": this.patientInformationEditForm.value.livesAlone,\r\n        \"active\": this.patientInformationEditForm.value.active,\r\n        \"registeredBy\": 1\r\n      }\r\n    \r\n   \r\n    \r\n    //this creates the patient object that will be sent to the API  \r\n    this.patient =  this.categoryMeasurementService.createPatientObject(this.patient.patient,this.patientCategoriesForm.value,this.patientMeasurementsForm.value)\r\n    console.log(this.patient)\r\n\r\n    //seding to the api\r\n    this.patientdataServie.editPatient(this.patient)\r\n\r\n    //subscribe has event handler for errors\r\n    .subscribe((response) => {\r\n      this.passwordChangedOutput = `Password changed to: ${this.patient.patient.password}`;\r\n      console.log(response)\r\n    });\r\n\r\n    }\r\n    else{\r\n      // this.success = this.failure\r\n      this.fail=true;\r\n    }\r\n  }\r\n\r\n  //insted of nav go back using previoud\r\n  onCancel(){\r\n    this.location.back();\r\n  }\r\n}\r\n","<!-- //TODO  -->\r\n<!-- the base form is the same as the original patient page but need the form to\r\n    load with the value for mthe edit in the search patient call-->\r\n\r\n<div class=\"container\">\r\n\r\n    <div class=\"success\" *ngIf=\"success\">\r\n        <div></div>\r\n        <div class=\"alert-container\">\r\n            <img class=\"alert-icon\" src=\"../../../assets/Images/checkmark.png\">\r\n        </div>\r\n        <div>\r\n            <h3>Success</h3>\r\n            <h5>Successfully added a patient!</h5>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"fail\" *ngIf=\"fail\">\r\n        <div></div>\r\n        <div class=\"alert-container\">\r\n            <img class=\"alert-icon\" src=\"../../../assets/Images/Exclamation1.png\">\r\n        </div>\r\n        <div>\r\n            <h3>Unsuccesful</h3>\r\n            <h5>Please check the highlighted fields.</h5>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"fail\" *ngIf=\"isPatient\">\r\n        <div></div>\r\n        <div class=\"alert-container\">\r\n            <img class=\"alert-icon\" src=\"../../../assets/Images/Exclamation1.png\">\r\n        </div>\r\n        <div>\r\n            <h3>Unsuccesful</h3>\r\n            <h5>This Hospital Number belongs to another patient.</h5>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- <div class=\"heading\"><b>Edit Patient</b></div> -->\r\n    <!-- ------ because this title is removed, margin is added to patient info boxes.------- -->\r\n\r\n    <div class=\"flex-row\">\r\n        <!-- meaningfull names patient-information-form-container -->\r\n        <div class=\"patient-information\">\r\n            <div class=\"heading-2\">Patient Information</div>\r\n            <form class=\"outlined\" [formGroup]=\"patientInformationEditForm\" (ngSubmit)=\"onSubmit()\">\r\n\r\n                <div><br></div> <!-- quick hack to add space -->\r\n\r\n                <div>\r\n                    <label>Title</label>\r\n                    <select formControlName=\"title\">\r\n                        <option *ngFor=\"let title of titles\" [ngValue]=\"title\">{{title}}\r\n                        </option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label for=\"ur-number\">Hospital Number</label>\r\n                    <input id=\"ur-number\" type=\"number\" formControlName=\"urNumber\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"given-name\">Given Name</label>\r\n                    <input id=\"given-name\" type=\"text\" formControlName=\"givenName\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"family-name\">Family Name</label>\r\n                    <input id=\"family-name\" type=\"text\" formControlName=\"familyName\">\r\n                </div>\r\n                <div>\r\n                    <label>Gender</label>\r\n                    <select formControlName=\"gender\">\r\n                        <option *ngFor=\"let gender of genders\" [ngValue]=\"gender\">{{gender}}</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label for=\"dob\">D.O.B</label>\r\n                    <input id=\"dob\" type=\"date\" placeholder=\"DD/MM/YYYY\" formControlName=\"dob\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"country-of-birth\">Country of Birth</label>\r\n                    <input id=\"country-of-birth\" type=\"text\" formControlName=\"countryOfBirth\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"preferred-language\">Preferred Language</label>\r\n                    <input id=\"preferred-language\" type=\"text\" formControlName=\"preferredLanguage\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"email\">Email</label>\r\n                    <input id=\"email\" type=\"email\" formControlName=\"email\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"password\">Password</label>\r\n                    <input id=\"password\" type=\"text\" placeholder=\"Change password\" formControlName=\"password\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"street-address\">Street Address</label>\r\n                    <input id=\"street-address\" type=\"text\" formControlName=\"address\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"suburb\">Suburb</label>\r\n                    <input id=\"suburb\" type=\"text\" formControlName=\"suburb\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"postcode\">Postcode</label>\r\n                    <input id=\"postcode\" pattern=\"[0-9]{4}\" type=\"number\" formControlName=\"postcode\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"mobile\">Mobile</label>\r\n                    <input id=\"mobile\" type=\"text\" pattern=\"[0-9]{10}\" type=\"number\" formControlName=\"mobileNumber\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"home\">Home Phone</label>\r\n                    <input id=\"home\" type=\"text\" pattern=\"[0-9]{10}\" type=\"number\" formControlName=\"homeNumber\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"lives-alone\">Lives Alone</label>\r\n                    <input id=\"lives-alone\" type=\"checkbox\" formControlName=\"livesAlone\">\r\n                </div>\r\n                <div>\r\n                    <label for=\"active\">Active</label>\r\n                    <input id=\"active\" type=\"checkbox\" formControlName=\"active\">\r\n                </div>\r\n\r\n                <p style=\"margin-left: 40%;\">{{passwordChangedOutput}}</p>\r\n\r\n            </form>\r\n        </div>\r\n\r\n        <!-- maybe split up into seperate components -->\r\n        <div class=\"categories-measurements\">\r\n\r\n          <div class=\"heading-2\">Patient Categories</div>\r\n          <div class=\"flex-col\">\r\n              <form class=\"outlined\" [formGroup]=\"patientCategoriesForm\" (ngSubmit)=\"onSubmit()\" autocomplete=\"off\">\r\n                  <div class=\"categories\">\r\n                      <div class=\"outlined\">\r\n                          <!-- source: https://www.youtube.com/watch?v=PUcfqRBSgWo&ab_channel=AchiRajuBalla -->\r\n\r\n                          <div *ngFor=\"let item of categories\">\r\n                              <div style=\"color: red; padding-top: 0.2rem; margin:10px;\" *ngIf=\"patientCategoriesForm.hasError('required', '1') && item.categoryID == '1'\">\r\n                                  Required\r\n                                </div>\r\n                              <input id=\"{{item.categoryID}}\" type=\"checkbox\" (change)=\"onChange()\" formControlName=\"{{item.categoryID}}\">\r\n                              <label for=\"{{item.categoryID}}\" style=\"width: auto;\">{{item.categoryName}}</label>\r\n                          </div>\r\n                      </div>\r\n                  </div>\r\n              </form>\r\n              <!-- TODO need to add the form groups here to get the values form the checkboxes -->\r\n              <div class=\"measurements\">\r\n                  <div class=\"heading-2\">Patient Measurements</div>\r\n\r\n                  <div class=\"outlined\">\r\n                      <div class=\"measurement-group\">\r\n                          <form class=\"outlined category-measurements-container\" [formGroup]=\"patientMeasurementsForm\"\r\n                              (ngSubmit)=\"onSubmit()\" autocomplete=\"off\">\r\n                              <div *ngFor=\"let category of categories\">\r\n                                  <div class=\"measurement-div\">\r\n                                      <div class=\"heading-4\"><b>{{category.categoryName}}</b></div>\r\n                                      <div class=\"heading-4\"><b>Frequency</b></div>\r\n                                  </div>\r\n\r\n                                  <!-- todo implement select all -->\r\n                                  <!-- <div>\r\n                                      Select All\r\n                                  </div> -->\r\n\r\n                                  <div class=\"selection-offset-div\" *ngFor=\"let measurement of measurements\">\r\n                                      <div *ngIf=\"measurement.categoryID == category.categoryID\"\r\n                                          class=\"measurement-div\">\r\n                                          <div style=\"width:200px;\">\r\n                                              <div style=\"color: red; padding-top: 0.2rem;\" *ngIf=\"patientMeasurementsForm.hasError('required', 'measurementID_4_CategoryID_1') && measurement.measurementID == '4'\">\r\n                                                  Required\r\n                                                </div>\r\n                                              <!-- todo fix this hack surely there is a better way lol  -->\r\n                                              <input type=\"checkbox\" id=\"measurementID_{{measurement.measurementID}}_CategoryID_{{category.categoryID}}\"\r\n                                                  formControlName=\"measurementID_{{measurement.measurementID}}_CategoryID_{{category.categoryID}}\">\r\n\r\n                                              <label for=\"measurementID_{{measurement.measurementID}}_CategoryID_{{category.categoryID}}\" style=\"width: auto;\">{{measurement.measurementName}}</label>\r\n                                          </div>\r\n                                          <select\r\n                                              formControlName=\"measurementID_{{measurement.measurementID}}_CategoryID_{{category.categoryID}}freq\">\r\n                                              <option *ngFor=\"let frequency of frequencies\" [ngValue]=\"frequency\">\r\n                                                  {{frequency}}</option>\r\n                                          </select>\r\n                                      </div>\r\n                                  </div>\r\n                              </div>\r\n                          </form>\r\n                      </div>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"button-container\">\r\n        <button class=\"button-cancel\" type=\"button\" (click)=\"onCancel()\">Cancel</button>\r\n        <button class=\"button-submit\" type=\"submit\" (click)=\"onSubmit()\">Update Details</button>\r\n    </div>\r\n\r\n</div>\r\n","\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, Form } from '@angular/forms'\r\nimport { NavigationService } from '../../../services/navigation.service';\r\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\r\nimport { PatientDataService } from 'src/app/services/patient-data.service';\r\nimport { patient, patientSearchOutputModel, searchPatientParamaterModel } from 'src/app/models/patient.model';\r\n\r\n\r\n//interface for searching\r\ninterface Ipatient {\r\n  title: string,\r\n  urnumber: string,\r\n  givenname: string,\r\n  familyname: string\r\n}\r\n\r\n@Component({\r\n  selector: 'app-search-patient',\r\n  templateUrl: './search-patient.component.html',\r\n  styleUrls: ['./search-patient.component.scss']\r\n})\r\nexport class SearchPatientComponent implements OnInit {\r\n\r\n  //data: searchPatientParamaterModel;\r\n  data;\r\n  patientForm: FormGroup;\r\n  success:boolean = false;\r\n  fail:boolean = false;\r\n  patients: patient[];\r\n  dataSource: patientSearchOutputModel[];\r\n  displayedColumns:string[] = ['urNumber','familyName','givenName','edit','view']\r\n  isSearchTableShowing: boolean = false;\r\n\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n    private route: Router,\r\n    public patientDataService: PatientDataService\r\n    ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initializeForm();\r\n    // let data = this.patientForm.value;\r\n    //   this.patientDataService.getPatients(data.urNumber,data.isExactUrNumber,data.givenName,data.isExactGivenName,data.familyName,data.isExactFamilyName)\r\n    //   .subscribe(\r\n    //     (data:any) => {\r\n    //       this.patients = data.rows;\r\n    //       this.dataSource = data.rows;\r\n    //     }\r\n    //   )\r\n    // this.patientDataService.getAllPatients().subscribe( data => {\r\n    //   console.log(data);\r\n    // })\r\n  }\r\n\r\n  initializeForm(): void{\r\n    this.patientForm = this.formBuilder.group({\r\n    searchgivenname: [''],\r\n    searchfamilyname: [''],\r\n    searchurnumber: [''],\r\n    isExactGivenName:[false],\r\n    isExactFamilyName:[false],\r\n    isExactUrNumber:[false]\r\n    })\r\n  }\r\n\r\n  onSubmit():void{\r\n    this.success = this.fail = false;\r\n\r\n    if (this.patientForm.status == \"VALID\") {\r\n      this.data = this.patientForm.value;\r\n\r\n      //simplyfying the process here by making data a typed object that models the paramter list.\r\n      console.log(\"from inside the onsubmit search patient\",this.data)\r\n\r\n      this.patientDataService.getSearchPatients(this.data)\r\n      .subscribe(\r\n        (response:any) => {\r\n          console.log(\"line 74\", response)\r\n          this.isSearchTableShowing = true;\r\n          this.patients = response;\r\n          this.dataSource = response;\r\n          console.log(this.dataSource);\r\n        },\r\n        error => {\r\n          this.isSearchTableShowing = false;\r\n          console.log(\"line 84 - no search input\")\r\n        });\r\n    }\r\n  }\r\n\r\n  navEditPatient(id:any)\r\n  {\r\n    this.route.navigate([`patient/edit-patient/${id}`])\r\n  }\r\n\r\n  navSearchPatient(id:any)\r\n  {\r\n    this.route.navigate([`patient/view/${id}`])\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n\r\n  <div class=\"patient-search-container\">\r\n    <form [formGroup]=\"patientForm\">\r\n      <div class=\"patient-search-row\">\r\n        <div class=\"PSR-lablel\">\r\n          <label for=\"ur-number\">UR Number</label>\r\n        </div>\r\n        <div class=\"PSR-input\">\r\n          <input class=\"input-text\" id=\"ur-number\" formControlName=\"searchurnumber\" #urNumber type=\"text\">\r\n        </div>\r\n        <div class=\"PSR-match\">\r\n          <input class=\"input-checkbox\" id=\"exact-urnumber\" type=\"checkbox\" formControlName=\"isExactUrNumber\"\r\n            placeholder=\"Exact match\">\r\n          <label for=\"exact-urnumber\">Exact match</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"patient-search-row\">\r\n        <div class=\"PSR-lablel\">\r\n          <label for=\"family-name\">Family Name</label>\r\n        </div>\r\n        <div class=\"PSR-input\">\r\n          <input class=\"input-text\" id=\"family-name\" formControlName=\"searchfamilyname\" #familyName type=\"text\">\r\n        </div>\r\n        <div class=\"PSR-match\">\r\n          <input class=\"input-checkbox\" id=\"exact-family-name\" type=\"checkbox\" formControlName=\"isExactFamilyName\"\r\n            placeholder=\"Exact match\">\r\n          <label for=\"exact-family-name\">Exact match</label>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"patient-search-row\">\r\n        <!-- the three search inputs need to be collated into one call, borrowed form the nba players search this checksk on the\r\n                keypress for changes thenmakes the cal via the service -->\r\n        <div class=\"PSR-lablel\">\r\n          <label for=\"given-name-input\">Given Name</label>\r\n        </div>\r\n        <div class=\"PSR-input\">\r\n          <input class=\"input-text\" id=\"given-name-input\" formControlName=\"searchgivenname\" #givenName type=\"text\">\r\n        </div>\r\n\r\n\r\n        <!-- input labels have for = -->\r\n\r\n\r\n        <div class=\"PSR-match\">\r\n          <input class=\"input-checkbox\" id=\"PSRMatchInput\" type=\"checkbox\" formControlName=\"isExactGivenName\"\r\n            placeholder=\"Exact match\">\r\n          <label for=\"PSRMatchInput\">Exact match</label>\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n\r\n    </form>\r\n  </div>\r\n\r\n  <div class=\"flex\">\r\n    <button class=\"search-button\" (click)=\"onSubmit()\">Search</button>\r\n  </div>\r\n\r\n  <div id=\"tableContainer\" *ngIf=\"isSearchTableShowing === true\">\r\n    <table mat-table [dataSource]=\"dataSource\">\r\n      <!-- Position Column -->\r\n      <ng-container matColumnDef=\"urNumber\">\r\n        <th mat-header-cell *matHeaderCellDef> UR Number </th>\r\n        <td mat-cell *matCellDef=\"let element\"> {{element.urnumber}} </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"familyName\">\r\n        <th mat-header-cell *matHeaderCellDef>Family Name</th>\r\n        <td mat-cell *matCellDef=\"let element\"> {{element.firstName}} </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"givenName\">\r\n        <th mat-header-cell *matHeaderCellDef>Given Name</th>\r\n        <td mat-cell *matCellDef=\"let element\"> {{element.surName}} </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"edit\">\r\n        <th mat-header-cell *matHeaderCellDef id=\"emptyHeaders\"></th>\r\n        <td mat-cell *matCellDef=\"let element\"><button class=\"patient-edit-button\" type=\"button\"\r\n            (click)=\"navEditPatient(element.urnumber)\">Edit</button></td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"view\">\r\n        <th mat-header-cell *matHeaderCellDef id=\"emptyHeaders\"></th>\r\n        <td mat-cell *matCellDef=\"let element\"><button class=\"patient-view-button\" type=\"button\"\r\n            (click)=\"navSearchPatient(element.urnumber)\">View</button></td>\r\n      </ng-container>\r\n      <tr mat-header-row id=\"header-row\" *matHeaderRowDef=\"displayedColumns; sticky:true\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"overview-rows\"></tr>\r\n    </table>\r\n  </div>\r\n</div>","import { formatDate } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\r\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\r\nimport { PatientDataService } from 'src/app/services/patient-data.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { ViewTableDataNoUr } from 'src/app/models/measurement.model';\r\nimport { patient, ViewPatientInfoModel } from 'src/app/models/patient.model';\r\nimport { forkJoin } from 'rxjs';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-view-patient',\r\n  templateUrl: './view-patient.component.html',\r\n  styleUrls: ['./view-patient.component.scss'],\r\n  providers: [DatePipe]\r\n})\r\nexport class ViewPatientComponent implements OnInit {\r\n\r\n  dataSource: MatTableDataSource<ViewTableDataNoUr>;\r\n  // pretty sure this is everything // the api doesnt return anything regarding the other measures\r\n\r\n  //moved the mock dat ainto the model fil\r\n  data: ViewTableDataNoUr[];\r\n\r\n\r\n  dataColumns: string[] = [\r\n  'dateTimeRecorded',\r\n  'ecogStatus',\r\n  'breathlessness',\r\n  'levelOfPain',\r\n  'fluidDrain',\r\n  'mobility',\r\n  'selfCare',\r\n  'usualActivities',\r\n  'qolPainDiscomfort',\r\n  'anxietyDepression',\r\n  'healthSlider'];\r\n\r\n  labels = [\r\n  'dateRecorded',\r\n  'eCogStatus',\r\n  'breathlessness',\r\n  'levelOfPain',\r\n  'fluidDrain',\r\n  'mobility',\r\n  'selfCare',\r\n  'usualActivies',\r\n  'painDiscomfort',\r\n  'anxietyDepression',\r\n  'qoLVasHealthSlider'\r\n  ];\r\n\r\n  displayedColumns = [];\r\n\r\n  patientInformationForm: FormGroup;\r\n  titles: any = ['Mr', 'Mrs', 'Dr']\r\n  genders: any = ['M', 'F']\r\n  countryOfBirths: any = ['Here', 'There']\r\n  preferredLanguages: any = ['English', 'Gibberish']\r\n  success:boolean = false;\r\n  fail:boolean = false;\r\n  currentPatientId:any;\r\n  patient: ViewPatientInfoModel;\r\n  patientMeasurement: ViewTableDataNoUr;\r\n\r\n\r\n    constructor(\r\n      private fb: FormBuilder,\r\n      private router:Router,\r\n      private activeRoute: ActivatedRoute,\r\n      public datePipe: DatePipe,\r\n      private patientDataService: PatientDataService\r\n      )\r\n       {\r\n        this.activeRoute.params.subscribe(params => {\r\n        this.currentPatientId = params.id\r\n\r\n        })\r\n      }\r\n\r\n    async ngOnInit(): Promise<void>{\r\n      //forkjoin or merge map to call both methods\r\n      let req1 =  this.patientDataService.getCurrentPatientDataInfo(this.currentPatientId);\r\n      let req2 = this.patientDataService.getCurrentPatientData(this.currentPatientId);\r\n      forkJoin([req1, req2]).subscribe(([data1, data2]) => {\r\n        console.log(data1)\r\n        this.patient = data1\r\n        //this.initializeForm(this.patient);\r\n        this.data = data2;\r\n        if(this.data){\r\n          this.transpose();\r\n          this.fillLabels();   \r\n        }\r\n    });\r\n    \r\n    }\r\n    \r\n\r\n    transpose() {\r\n      let transposedData = [];\r\n      for (let column = 0; column < this.dataColumns.length; column++) {\r\n        transposedData[column] = {\r\n          label: this.labels[column]\r\n        };\r\n        for (let row = 0; row < this.data.length; row++) {\r\n          transposedData[column][`column${row}`] = this.data[row][this.dataColumns[column]];\r\n        }\r\n        console.log(\"this is form inside the transpose\", transposedData);\r\n      }\r\n      this.dataSource = new MatTableDataSource(transposedData);\r\n      \r\n    }\r\n\r\n    fillLabels() {\r\n      this.displayedColumns = ['label'];\r\n      for (let i = 0; i < this.data.length; i++) {\r\n        this.displayedColumns.push('column' + i);\r\n      }\r\n    }\r\n\r\n  scroll(event: WheelEvent): void {\r\n    if (event.deltaY > 0) document.getElementById('tablecont')!.scrollLeft += 40;\r\n    else document.getElementById('tablecont')!.scrollLeft -= 40;\r\n    event.preventDefault();\r\n  }\r\n  \r\n}","<!-- test -->\r\n\r\n<!-- span instead of input for fields that don't change -->\r\n\r\n<div class=\"container\">\r\n\r\n  <div class=\"success\" *ngIf=\"success\">\r\n    <div></div>\r\n    <div class=\"AlertContainer\">\r\n      <img class=\"AlertIcon\" src=\"../../../assets/Images/checkmark.png\">\r\n    </div>\r\n    <div>\r\n      <h3>Success</h3>\r\n      <h5>Successfully added a patient!</h5>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"fail\" *ngIf=\"fail\">\r\n    <div></div>\r\n    <div class=\"AlertContainer\">\r\n      <img class=\"AlertIcon\" src=\"../../../assets/Images/Exclamation1.png\">\r\n    </div>\r\n    <div>\r\n      <h3>Unsuccesful</h3>\r\n      <h5>Please check the highlighted fields.</h5>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- <div class=\"heading\"><b>Add Patient</b></div> -->\r\n\r\n  <div class=\"flexCol\">\r\n    <div class=\"flexRow\">\r\n\r\n      <div class=\"patient-information-container\">\r\n        <div class=\"heading-2\">Patient Information</div>\r\n\r\n        <div class=\"outlined\">\r\n\r\n          <div class=\"flexRow\">\r\n\r\n            <div class=\"patient-information-column-first\">\r\n\r\n              <div class=\"patient-information-row\">\r\n                <div *ngIf=\"patient\" class=\"information-first-column\" style=\"font-weight: bold; font-size: x-large;\">\r\n                  {{this.patient.urnumber == undefined? '': this.patient.urnumber }}</div>\r\n              </div>\r\n\r\n              <div class=\"patient-information-row\">\r\n                <div class=\"information-first-column\"> {{ this.patient.title }} {{ this.patient.firstName }} {{\r\n                  this.patient.surName }}</div>\r\n              </div>\r\n\r\n              <div class=\"patient-information-row\">\r\n                <div class=\"information-first-column\">{{ this.patient.dob | date:'dd-MM-yyyy' }}</div>\r\n              </div>\r\n\r\n            </div>\r\n            <div class=\"patient-information-column-secondandthird\">\r\n              <div class=\"patient-information-column-second\">\r\n\r\n                <div class=\"patient-information-row\">\r\n                  <label>Status: </label>\r\n                  <div class=\"information\" style=\"color: chartreuse; font-weight: bold;\"\r\n                    *ngIf=\"this.patient.active === true\"> Active </div>\r\n                  <div class=\"information\" style=\"color: red; font-weight: bold;\" *ngIf=\"this.patient.active === false\">\r\n                    Innactive </div>\r\n                </div>\r\n                <div class=\"patient-information-row\">\r\n                  <label>Category: </label>\r\n                  <a class=\"information\">IPC</a>\r\n                </div>\r\n                <div class=\"patient-information-row\">\r\n                  <label>Cancer Type: </label>\r\n                  <a class=\"information\">haematologic malignancy</a>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"patient-information-column-third\">\r\n\r\n                <div class=\"patient-information-row\">\r\n                  <label>Date of Insertion: </label>\r\n                  <a class=\"information\">22 / 04 / 2021</a>\r\n                </div>\r\n                <div class=\"patient-information-row\">\r\n                  <label>Removal Date: </label>\r\n                  <a class=\"information\">2 / 06 / 2021</a>\r\n                </div>\r\n                <div class=\"patient-information-row\">\r\n                  <label>Chemical pleurodesis: </label>\r\n                  <a class=\"information\">Yes</a>\r\n                </div>\r\n                <div class=\"patient-information-row\">\r\n                  <label>Date:</label>\r\n                  <a class=\"information\">14 / 07 / 2021</a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <!-- <div class=\"flexRow\">\r\n      <div class=\"patient-measurement-container\">\r\n\r\n         <div class=\"measurements\"> \r\n\r\n          <div class=\"heading-2\">Patient Measurements</div>\r\n\r\n           <div id=\"tablecont\" (wheel)=\"scroll($event)\"> \r\n          <table mat-table class=\"table-container\" [dataSource]=\"this.dataSource\">\r\n\r\n            <ng-container matColumnDef=\"label\" sticky=\"true\">\r\n              <td class=\"header\" class=\"table-header-cell\" *matCellDef=\"let row\">{{ row.label }}</td>\r\n            </ng-container>\r\n\r\n            <ng-container [matColumnDef]=\"'column' + i\" *ngFor=\"let column of data; let i = index\">\r\n              <td class=\"table-cell\" *matCellDef=\"let row\"> {{ row['column' + i] }} </td>\r\n            </ng-container>\r\n\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n          </table>\r\n\r\n        </div> \r\n      </div>\r\n    </div> -->\r\n\r\n    <div class=\"flexRow\">\r\n      <div class=\"patient-information-container\" style=\"margin-top: -3vh\">\r\n\r\n        <div class=\"heading-2\" style=\"margin-bottom: 2vh\">Patient Measurements</div>\r\n\r\n        <div class=\"table-container\" id=\"tablecont\" (wheel)=\"scroll($event)\">\r\n          <table>\r\n            <tr>\r\n              <th class=\"table-header-cell\"> Date Recorded</th>\r\n              <td class=\"table-cell-date\" *ngFor=\"let element of this.data\">\r\n                {{element.dateTimeRecorded | date:'dd/MM/yyyy' }} </td>\r\n            </tr>\r\n            <tr>\r\n              <th class=\"table-header-cell\">ECOG Status</th>\r\n              <td class=\"table-cell\" *ngFor=\"let element of this.data\">\r\n                {{element.eCogStatus}} </td>\r\n            </tr>\r\n            <tr>\r\n              <th class=\"table-header-cell\">Breathlessness</th>\r\n              <td class=\"table-cell\" *ngFor=\"let element of this.data\">\r\n                {{element.breathlessness}} </td>\r\n            </tr>\r\n            <tr>\r\n              <th class=\"table-header-cell\">Level of Pain</th>\r\n              <td class=\"table-cell\" *ngFor=\"let element of this.data\">\r\n                {{element.levelOfPain}} </td>\r\n            </tr>\r\n            <tr>\r\n              <th class=\"table-header-cell\">Fluid Drain</th>\r\n              <td class=\"table-cell\" *ngFor=\"let element of this.data\">\r\n                {{element.fluidDrain}} </td>\r\n            </tr>\r\n            <tr>\r\n              <th class=\"table-header-cell\">QoL Mobility</th>\r\n              <td class=\"table-cell\" *ngFor=\"let element of this.data\">\r\n                {{element.mobility}} </td>\r\n            </tr>\r\n            <tr>\r\n              <th class=\"table-header-cell\">QoL Self Care</th>\r\n              <td class=\"table-cell\" *ngFor=\"let element of this.data\">\r\n                {{element.selfCare}} </td>\r\n            </tr>\r\n            <tr>\r\n              <th class=\"table-header-cell\">QoL Usual Activies</th>\r\n              <td class=\"table-cell\" *ngFor=\"let element of this.data\">\r\n                {{element.usualActivities}} </td>\r\n            </tr>\r\n            <tr>\r\n              <th class=\"table-header-cell\">QoL Pain Discomfort</th>\r\n              <td class=\"table-cell\" *ngFor=\"let element of this.data\">\r\n                {{element.qolPainDiscomfort}} </td>\r\n            </tr>\r\n            <tr>\r\n              <th class=\"table-header-cell\">QoL Anxiety Depression</th>\r\n              <td class=\"table-cell\" *ngFor=\"let element of this.data\">\r\n                {{element.anxietyDepression}} </td>\r\n            </tr>\r\n            <tr>\r\n              <th class=\"table-header-cell\">QoL Vas Health Slider</th>\r\n              <td class=\"table-cell\" *ngFor=\"let element of this.data\">\r\n                {{element.healthSlider}} </td>\r\n            </tr>\r\n          </table>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n\r\n    <div class=\"buttonContainer\">\r\n      <button class=\"buttonSubmit\">\r\n        <!-- [routerLink]=\"['/patient/edit-patient/',this.patient.urnumber(this.route.url)]\">  -->\r\n        Export Data\r\n      </button>\r\n      <button class=\"buttonSubmit\">\r\n        <!-- [routerLink]=\"['/patient/edit-patient/',this.patient.urnumber(this.route.url)]\">  -->\r\n        Edit Patient\r\n      </button>\r\n    </div>\r\n\r\n  </div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms'\r\n\r\n@Component({\r\n  selector: 'app-add-staff',\r\n  templateUrl: './add-staff.component.html',\r\n  styleUrls: ['./add-staff.component.scss']\r\n})\r\nexport class AddStaffComponent implements OnInit {\r\n\r\n  staffForm: FormGroup;\r\n  success:boolean = false;\r\n  fail:boolean = false\r\n\r\n  constructor(private fb: FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initializeForm();\r\n  }\r\n\r\n  initializeForm(): void{\r\n    this.staffForm = this.fb.group({\r\n    staffID: ['', Validators.required],\r\n    givenName: ['', Validators.required],\r\n    familyName: ['', Validators.required],\r\n    password: ['', Validators.required],\r\n    roleID: ['', Validators.required],\r\n    })\r\n  }\r\n\r\n  onSubmit():void{\r\n\r\n    this.success = this.fail = false;\r\n\r\n    // If Valid \r\n    if (this.staffForm.status == \"VALID\") {\r\n      console.log(this.staffForm.value)\r\n      this.success = true;\r\n      this.staffForm.reset();\r\n    }\r\n    else{\r\n      this.fail=true\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"success\" *ngIf=\"success\">\r\n        <div></div>\r\n        <div class=\"alert-container\">\r\n            <img class=\"alert-icon\" src=\"../../../assets/Images/checkmark.png\">\r\n        </div>\r\n        <div>\r\n            <h3>Success</h3>\r\n            <h5>Successfully added a staff member!</h5>\r\n        </div>\r\n    </div>\r\n    <div class=\"fail\" *ngIf=\"fail\">\r\n        <div></div>\r\n        <div class=\"alert-container\">\r\n            <img class=\"alert-icon\" src=\"../../../assets/Images/Exclamation1.png\">\r\n        </div>\r\n        <div>\r\n            <h3>Unsuccesful</h3>\r\n            <h5>Please check the highlighted fields.</h5>\r\n        </div>\r\n    </div>\r\n    <div class=\"heading\"><b>Add Staff</b></div>\r\n    <div class=\"contents flex\">\r\n        <div class=\"patient-information\">\r\n            <form [formGroup]=\"staffForm\" (ngSubmit)=\"onSubmit()\">\r\n                <div>\r\n                    <label>Staff ID</label>\r\n                    <input type=\"number\" formControlName=\"staffID\">\r\n                </div>\r\n                <div>\r\n                    <label>Given Name</label>\r\n                    <input type=\"text\" formControlName=\"givenName\">\r\n                </div>\r\n                <div>\r\n                    <label>Family Name</label>\r\n                    <input type=\"text\" formControlName=\"familyName\">\r\n                </div>\r\n                <div>\r\n                    <label>Password</label>\r\n                    <input type=\"text\" formControlName=\"password\">\r\n                </div>\r\n                <div>\r\n                    <label>Role ID</label>\r\n                    <input type=\"number\" formControlName=\"roleID\">\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n\r\n        <div class=\"categories-measurements\">\r\n            <div class=\"flex\">\r\n                <div class=\"categories\">\r\n                    <div class=\"heading-2\">Categories</div>\r\n                    <div class=\"outlined\">\r\n                        <div>\r\n                            <input type=\"checkbox\">\r\n                            Indwelling Plural Catheter\r\n                        </div>\r\n                        <div>\r\n                            <input type=\"checkbox\">\r\n                            Asthma\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div class=\"measurements\">\r\n                    <div class=\"heading-2\">Permissions</div>\r\n                    <div class=\"outlined\">\r\n                        <div class=\"group-divide\">\r\n                            <b>Indwelling Plural Catheter</b>\r\n                            <div>\r\n                                <input type=\"checkbox\">\r\n                                Read\r\n                            </div>\r\n                            <div>\r\n                                <input type=\"checkbox\">\r\n                                Write\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"group-divide\">\r\n                            <b>Asthma</b>\r\n                            <div>\r\n                                <input type=\"checkbox\">\r\n                                Read\r\n                            </div>\r\n                            <div>\r\n                                <input type=\"checkbox\">\r\n                                Write\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <button class=\"pointer\" type=\"submit\" (click)=\"onSubmit()\">Add Staff</button>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-viewedit-staff',\r\n  templateUrl: './viewedit-staff.component.html',\r\n  styleUrls: ['./viewedit-staff.component.scss']\r\n})\r\nexport class VieweditStaffComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>viewedit-staff works!</p>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AlertComponent } from \"src/app/components/alert/alert.component\";\r\nimport { AlertResponse } from \"src/app/models/alertResponse.model\";\r\nimport { AlertsService } from \"src/app/services/alerts.service\";\r\n\r\n@Component({\r\n  selector: 'app-alert-page',\r\n  templateUrl: './alert-page.component.html',\r\n  styleUrls: ['./alert-page.component.scss']\r\n})\r\nexport class AlertPageComponent implements OnInit {\r\n\r\n  alerts: AlertResponse[]\r\n\r\n  constructor(\r\n    private alertService: AlertsService\r\n  ) {\r\n\r\n  }\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    this.alerts = await this.alertService.GetAlerts()\r\n  }\r\n\r\n  // When an alert is actioned ClearAlert takes the alert and removes it from the current 'alerts' list\r\n  ClearAlert(alert: AlertResponse) {\r\n    // If the current alerts contains the actioned alert it is removed\r\n    if (this.alerts.includes(alert)) {\r\n      let index = this.alerts.indexOf(alert);\r\n      this.alerts.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n","<div class=\"container\" >\r\n  <app-alert (clearAlert)=\"ClearAlert($event)\" *ngFor=\"let alert of alerts\" [alert]=\"alert\"></app-alert>\r\n</div>\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AlertResolution } from \"src/app/models/alertResolution.model\";\r\nimport { AlertResponse } from \"src/app/models/alertResponse.model\";\r\nimport { AlertsService } from \"src/app/services/alerts.service\";\r\n\r\n@Component({\r\n  selector: 'app-alert',\r\n  templateUrl: './alert.component.html',\r\n  styleUrls: ['./alert.component.scss']\r\n})\r\nexport class AlertComponent {\r\n\r\n  // This should be grabbed from a service later\r\n  userID: number = 1;\r\n\r\n  constructor(\r\n    private alertService: AlertsService,\r\n    private router: Router\r\n  ) {\r\n  }\r\n\r\n  @Input() alert: AlertResponse;\r\n  @Output() clearAlert = new EventEmitter()\r\n\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  // When a button is pressed the action is then logged and the alerts updated\r\n  Actioned(action: string, alertID: number) {\r\n\r\n    // Loging alert\r\n    this.alertService.AlertAction(\r\n      {\r\n        identifier: alertID,\r\n        userID: this.userID,\r\n        action: action\r\n      }\r\n    );\r\n\r\n    // Removing alert from list by emitting the alert to the partent\r\n    this.clearAlert.emit(this.alert);\r\n  }\r\n\r\n  // When a user clicks on a client name it will then open the view patient\r\n  ViewPatient(patientID: number) {\r\n    this.router.navigateByUrl('Patient/Editpatient/' + patientID);\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n  <p (click)=\"ViewPatient(alert.patientID)\">{{alert.patientName}} : {{alert.alertTitle}}</p>\r\n  <div class=\"actions\">\r\n    <button (click)=\"Actioned('Actioned',alert.identifier)\" class=\"action\">Actioned</button>\r\n    <button (click)=\"Actioned('Snooze',alert.identifier)\" class=\"snooze\">Snooze</button>\r\n    <button (click)=\"Actioned('Dismiss',alert.identifier)\" class=\"dismiss\">Dismiss</button>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-nav-bar',\r\n  templateUrl: './nav-bar.component.html',\r\n  styleUrls: ['./nav-bar.component.scss']\r\n})\r\n\r\n\r\n\r\nexport class NavBarComponent implements OnInit {\r\n\r\n  constructor(\r\n    public route: Router,\r\n    public activatedRoute: ActivatedRoute,\r\n  ) {\r\n    // this.activatedRoute.params.subscribe(params => {\r\n    //   console.log(params)\r\n    //   })\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.activatedRoute.queryParams.subscribe(params => {\r\n    })\r\n\r\n  }\r\n\r\n\r\n  isEditPatient(currentUrl: any) {\r\n    let url = currentUrl\r\n    let query = /\\/patient\\/edit-patient\\/\\d*/g\r\n    let string = url;\r\n    string = string.toLowerCase();\r\n    let result = string.match(query);\r\n\r\n    if (result != null) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  // if edit tab or view tab show everything\r\n  isEditOrViewTab(currentUrl: any) {\r\n    let url = currentUrl\r\n    let query = /\\/patient\\/edit-patient\\/\\d*|\\/patient\\/view\\/\\d*/g\r\n    let string = url;\r\n    string = string.toLowerCase();\r\n    let result = string.match(query);\r\n\r\n    if (result != null) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  // if search tab or add tab show search and add\r\n  isSearchOrAddTab(currentUrl: any) {\r\n    let url = currentUrl\r\n    let query = /\\/patient\\/search|\\/patient\\/add-patient/g\r\n    let string = url;\r\n    string = string.toLowerCase();\r\n    let result = string.match(query);\r\n\r\n    if (result != null) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  isPatientSubMenu(currentUrl: any) {\r\n    let url = currentUrl\r\n    let query = /\\/patient\\/.*/g\r\n    let string = url;\r\n    string = string.toLowerCase();\r\n    let result = string.match(query);\r\n\r\n    if (result != null) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  getID(currentUrl: any) {\r\n\r\n    let url = currentUrl;\r\n\r\n    let query = /\\d+/\r\n    let result = currentUrl.match(query)[0]\r\n    return result;\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n","<!-- source https://www.youtube.com/watch?v=v8NpQYH2O5M&ab_channel=Codevolution -->\r\n<div class=\"Logo\">\r\n  <a style=\"color: rgb(20,100,180)\">Northern </a><br>\r\n  <a style=\"color: #6a6a6a;\">Health</a>\r\n</div>\r\n<div class=\"link\" routerLink='/alerts' routerLinkActive=\"active-button\">\r\n  <a routerLinkActive=\"main-menu-active-btn\">Alerts</a>\r\n  <div class=\"alert-container\">\r\n    <img class=\"alert-icon\" src=\"../../../assets/Images/Exclamation1.png\">\r\n    <div class=\"alert-number\">\r\n      9\r\n    </div>\r\n  </div>\r\n</div>\r\n<a class=\"link\" routerLink=\"patient/search\" routerLinkActive=\"active-button\"\r\n  [ngClass]=\"{'sub-active-button':this.isPatientSubMenu(this.route.url)}\"\r\n  [ngStyle]=\"{'background-color': this.isPatientSubMenu(this.route.url) ? 'white' : ''}\">Patient</a>\r\n<!-- if search tab show search and add -->\r\n<div *ngIf=\"isSearchOrAddTab(this.route.url)\">\r\n  <a class=\"sub-link\" routerLink=\"/patient/search\" routerLinkActive=\"sub-active-button\">Search</a>\r\n  <a class=\"sub-link\" routerLink=\"patient/add-patient\" routerLinkActive=\"sub-active-button\">Add</a>\r\n</div>\r\n<!-- if edit tab show search view edit and add new -->\r\n<div *ngIf=\"isEditOrViewTab(this.route.url)\">\r\n  <a class=\"sub-link\" routerLink=\"/patient/search\" routerLinkActive=\"sub-active-button\">Search</a>\r\n  <a class=\"sub-link\" [routerLink]=\"['/patient/view/',getID(this.route.url)]\"\r\n    routerLinkActive=\"sub-active-button\">View</a>\r\n  <a class=\"sub-link\" [routerLink]=\"['/patient/edit-patient/',getID(this.route.url)]\"\r\n    [ngClass]=\"{'sub-active-button':isEditPatient(this.route.url)}\">Edit</a>\r\n  <a class=\"sub-link\" routerLink=\"patient/add-patient\" routerLinkActive=\"sub-active-button\">Add</a>\r\n</div>\r\n<a class=\"link\">Library</a>\r\n<a class=\"link\">Resources</a>\r\n<a class=\"link\">Register Staff</a>","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { AlertResponse } from \"../models/alertResponse.model\";\r\nimport { AlertResolution } from \"../models/alertResolution.model\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlertsService {\r\n\r\n  constructor() { }\r\n\r\n   /*\r\n    When GetAlerts is called, it returns all un-actioned alerts in the form\r\n    identifier: number,\r\n    patientName: string,\r\n    alertTitle: string\r\n    As of right now the frequency of calling get alerts is to be decided\r\n   */\r\n\r\n  // GetAlerts(): Promise<AlertResponse[]>{\r\n    GetAlerts(): AlertResponse[]{\r\n    // Connection to the back end\r\n\r\n    // return this.http.get<AlertResponse[]>(\r\n      // API connection string goes here!!!\r\n    // ).toPromise();\r\n\r\n\r\n    // Test data\r\n    let data =\r\n    [\r\n      {\r\n        identifier: 1,\r\n        patientName: \"Dylan Smith\",\r\n        patientID: 1000001,\r\n        alertTitle: \"Missed measurement\"\r\n      },\r\n      {\r\n        identifier: 2,\r\n        patientName: \"Tim Daves\",\r\n        patientID: 1000002,\r\n        alertTitle: \"Repeat high drainage\"\r\n      },\r\n      {\r\n        identifier: 3,\r\n        patientName: \"Sarah Tomson\",\r\n        patientID: 1000005,\r\n        alertTitle: \"Called emergency\"\r\n      },\r\n      {\r\n        identifier: 5,\r\n        patientName: \"Vito Kohler\",\r\n        patientID: 1000005,\r\n        alertTitle: \"Called emergency\"\r\n      },\r\n      {\r\n        identifier: 15,\r\n        patientName: \"Mario Paucek\",\r\n        patientID: 1000005,\r\n        alertTitle: \"Called emergency\"\r\n      },\r\n      {\r\n        identifier: 4,\r\n        patientName: \"Reginald Rodriguez\",\r\n        patientID: 1000005,\r\n        alertTitle: \"Called emergency\"\r\n      },\r\n      {\r\n        identifier: 8,\r\n        patientName: \"Camden Veum\",\r\n        patientID: 1000005,\r\n        alertTitle: \"Called emergency\"\r\n      }\r\n    ];\r\n    return data;\r\n  }\r\n\r\n\r\n  /*\r\n    AlertAction is called when an alert is interacted with by a staff member\r\n    in the form\r\n      identifier: number,\r\n      userID: number,\r\n      action: string\r\n    'action' may contain 'Actioned'/'Dismissed'/'Snooze'\r\n\r\n\r\n    How do we handle two staff sending an action on the same action????\r\n    Maybe a table in the database for actions that uses the datetime and staffID as a primary key\r\n  */\r\n  AlertAction(action: AlertResolution): void{\r\n    console.log(\"AlertsService, AlertAction: \\n\", action)\r\n  }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Form, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Observable } from 'rxjs/internal/Observable';\r\n\r\nimport { environment } from 'src/environments/environment';\r\nimport { measurement, measurementCategory } from '../models/measurement.model';\r\nimport { addPatientModel, editPatientModel, patient, patientMeasurement } from '../models/patient.model'\r\nimport { category } from '../models/category.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CategorymeasurementService {\r\n\r\n  //this list is going to hold the current list of meqasurements along with the corresonding names\r\n\r\n\r\n  constructor(private http:HttpClient) {\r\n\r\n  }\r\n\r\n  //this needs to point to the endpoint im going to create which will get me all the measurements\r\n\r\n  private apiURL = environment.apiURL ;\r\n  private adminPatientURL = this.apiURL + \"/AdminPatient\"\r\n  private categoryMeasurement = this.apiURL + \"/CategoryMeasurement\"\r\n\r\n\r\n  //this should get all the current measurements\r\n  getCurrentMeasurments(): Promise<measurement[]>{\r\n\r\n    return this.http.get<measurement[]>(`${this.adminPatientURL}/GetMeasurements`).toPromise()\r\n\r\n  }\r\n\r\n  // This function gets categories to display\r\n  getCategories() {\r\n    return this.http.get<category[]>(`${this.categoryMeasurement}/Categories`)\r\n  }\r\n\r\n  //This function gets the patient measurements associated with the selected categories\r\n  getCategoryMeasurements(patientCategoriesForm: FormGroup) {\r\n\r\n    let categoryID: number[] = [];\r\n\r\n    for (const item in patientCategoriesForm) {\r\n      if (patientCategoriesForm[item]) {\r\n\r\n        //list of selected Id's\r\n        categoryID.push(parseInt(item))\r\n\r\n      }\r\n    }\r\n    //this should be a get\r\n    return this.http.put<measurementCategory[]>(`${this.categoryMeasurement}/CategoryMeasurements`,categoryID)\r\n  }\r\n\r\n  //This function gets the patient measurements that are currently assigned to them and creates a formgroup for each measurement\r\n  // getPatientCategoryMeasurements(patientCategoriesForm:FormGroup,patientMeasurements:patientMeasurement[]) {\r\n  //   //todo\r\n  // }\r\n\r\n  //This function dynamically creates a form group for the categories\r\n  toFormGroupCategory(categories:category[] ) {\r\n    const group: any = {};\r\n\r\n    categories.forEach(category => {\r\n      category.categoryName == 'Indwelling Pleural Catheter' ? group[category.categoryID] = new FormControl(true,Validators.requiredTrue)\r\n        :group[category.categoryID] = new FormControl(false)\r\n    });\r\n    return new FormGroup(group);\r\n  }\r\n\r\n  //This function dynamically gets all the categories from the database and sets the categories that the patient is assigned to\r\n  toFormGroupPatientCategories(categories: category[], patientCategories: number[]) {\r\n    const group: any = {};\r\n    const isCategoriesExists: boolean = patientCategories.length == 0 ? false : true;\r\n\r\n\r\n    categories.forEach(category => {\r\n\r\n      //todo set to fluid to required\r\n\r\n      //if the patient has categories assigned to them set to true\r\n      if (isCategoriesExists) {\r\n        patientCategories.forEach(patientCategory => {\r\n          if (patientCategory == category.categoryID) {\r\n            category.categoryName == 'Indwelling Pleural Catheter' ? group[category.categoryID] = new FormControl(true, Validators.requiredTrue)\r\n              : group[category.categoryID] = new FormControl(true)\r\n            \r\n          //other wise set control to false\r\n          } else {\r\n            group[category.categoryID] = new FormControl(false)\r\n          }\r\n        })\r\n      } else {\r\n        group[category.categoryID] = new FormControl(false)\r\n      }\r\n\r\n    });\r\n\r\n    return new FormGroup(group)\r\n  }\r\n\r\n\r\n  //This function dynamically creates a form group for the measurements\r\n  toFormGroupMeasurement(measurement: measurementCategory[], patientMeasurementsForm: any) {\r\n    const group: any = {};\r\n    let patientMeasurements: any[] = [];\r\n    let isChecked: boolean[] = [];\r\n\r\n\r\n    for (const index in patientMeasurementsForm) {\r\n      if (typeof patientMeasurementsForm[index] != \"boolean\") {\r\n        patientMeasurements.push(patientMeasurementsForm[index])\r\n      } else {\r\n        isChecked.push(patientMeasurementsForm[index])\r\n      }\r\n\r\n    }\r\n\r\n    //todo find a better way than this lol very hacky VVVVVVV\r\n    //if form has ticked inputs assign them\r\n    measurement.forEach((measurement, index) => {\r\n      if (patientMeasurements[index]) {\r\n        group['measurementID_' + measurement.measurementID + '_CategoryID_' + measurement.categoryID+'freq'] = new FormControl(patientMeasurements[index]);\r\n      } else {\r\n        //assign default frequency\r\n        group['measurementID_'+measurement.measurementID+'_CategoryID_'+measurement.categoryID+'freq'] = new FormControl(measurement.frequency);\r\n      }\r\n\r\n      //if checkbox already has a value keep that value\r\n      if (isChecked[index] != null) {\r\n        'Fluid Drain' == measurement.measurementName && measurement.categoryID == 1 ?\r\n          group['measurementID_' + measurement.measurementID + '_CategoryID_' + measurement.categoryID] = new FormControl(isChecked[index], Validators.requiredTrue)\r\n          :group['measurementID_' + measurement.measurementID + '_CategoryID_' + measurement.categoryID] = new FormControl(isChecked[index])\r\n      } else {\r\n        //enter default value\r\n        'Fluid Drain' == measurement.measurementName && measurement.categoryID == 1 ?\r\n          group['measurementID_' + measurement.measurementID + '_CategoryID_' + measurement.categoryID] = new FormControl(true,Validators.requiredTrue) :\r\n          group['measurementID_' + measurement.measurementID + '_CategoryID_' + measurement.categoryID] = new FormControl(true)\r\n      }\r\n    });\r\n\r\n     return new FormGroup(group);\r\n  }\r\n\r\n  //This Function gets the patient's measurements and dynamically creates a form controll for each measurement\r\n  toFormGroupPatientMeasurements(measurements: measurementCategory[], patientMeasurements: any, patientMeasurementsForm: any) {\r\n    console.log(measurements)\r\n    console.log(patientMeasurements)\r\n    console.log(patientMeasurementsForm)\r\n    const group: any = {};\r\n    let curPatientMeasurements: any[] = [];\r\n    let isChecked: boolean[] = [];\r\n    let found: any[] = [];\r\n\r\n    //update users existing inputs \r\n    for (const index in patientMeasurementsForm) {\r\n      console.log(patientMeasurements[index])\r\n      if (typeof patientMeasurementsForm[index] != \"boolean\") {\r\n        curPatientMeasurements.push(patientMeasurementsForm[index])\r\n      } else {\r\n        isChecked.push(patientMeasurementsForm[index])\r\n      }\r\n\r\n    }\r\n    \r\n    //todo fluid drain required\r\n    //todo save categories when patient changes inputs\r\n\r\n    \r\n    for (const measurement in measurements) {\r\n      for (const patientMeasurement in patientMeasurements) {\r\n        //If patient measurement is active assign value\r\n        if (patientMeasurements[patientMeasurement].measurementId == measurements[measurement].measurementID\r\n          && patientMeasurements[patientMeasurement].categoryId == measurements[measurement].categoryID) {\r\n            \r\n          group['measurementID_' + measurements[measurement].measurementID + '_CategoryID_' + measurements[measurement].categoryID + 'freq'] = new FormControl(patientMeasurements[patientMeasurement].frequency);\r\n\r\n          group['measurementID_' + measurements[measurement].measurementID + '_CategoryID_' + measurements[measurement].categoryID] = new FormControl(true);\r\n          \r\n          found.push(measurements[measurement])\r\n        } else {\r\n          \r\n          //If not active assign default value and deactivate checkbox\r\n          //problem undefined\r\n          console.log(found.find(index => { return index == measurements[measurement] }) == undefined)\r\n          if (found.find(index => { return index == measurements[measurement] }) == undefined) {\r\n            group['measurementID_' + measurements[measurement].measurementID + '_CategoryID_' + measurements[measurement].categoryID + 'freq'] = new FormControl(measurements[measurement].frequency);\r\n            group['measurementID_' + measurements[measurement].measurementID + '_CategoryID_' + measurements[measurement].categoryID] = new FormControl(false);            \r\n          }\r\n        }\r\n      }      \r\n     \r\n    }\r\n    \r\n\r\n    return new FormGroup(group)     \r\n\r\n  }\r\n\r\n\r\n  // This function takes the form data from the add patient page and returns an object that the api can use\r\n  createPatientObject(patient: patient, patientCategoriesForm: FormBuilder, patientMeasurementForm: FormBuilder) {    \r\n\r\n    let patientObject: addPatientModel;\r\n    let patientMeasurements: patientMeasurement[] | null = [];\r\n    let patientCategories: number[] | null = [];\r\n\r\n\r\n    //add Active categories\r\n    for (const category in patientCategoriesForm) {\r\n      if (patientCategoriesForm[category]) {\r\n        patientCategories.push(parseInt(category))\r\n      }\r\n\r\n    }\r\n    if (patientCategories.length == 0) {\r\n      patientCategories = null;\r\n    }\r\n\r\n    let Id: RegExpMatchArray;\r\n    let isCheckbox: any;\r\n    let measurementId: number;\r\n    let categoryId: number;\r\n\r\n    //query to find category id and measurement id\r\n    let query: RegExp = /\\d/g;\r\n    let isFrequency: RegExp = /.*freq/g;\r\n\r\n    //checks if object is a checkbox\r\n    for (const item in patientMeasurementForm) {\r\n\r\n      //if this is a checkbox and checkbox is true\r\n      if (!item.match(isFrequency) && patientMeasurementForm[item]) {\r\n        //get ID's\r\n        Id = item.match(query);\r\n        measurementId = parseInt(Id[0])\r\n        categoryId = parseInt(Id[1])\r\n\r\n        //push to measurement object\r\n        patientMeasurements.push({\r\n          measurementId: measurementId,\r\n          categoryId: categoryId,\r\n          frequency: patientMeasurementForm[item + 'freq']\r\n\r\n        })\r\n      }\r\n    }\r\n\r\n    // //adds Measurements\r\n    // for (const item in patientMeasurementForm) {\r\n    //   console.log(item)\r\n    //   if (item.match(isFrequency) != null) {\r\n\r\n    //     Id = item.match(query);\r\n    //     measurementId = parseInt(Id[0])\r\n    //     categoryId = parseInt(Id[1])\r\n\r\n    //     patientMeasurements.push({\r\n    //       measurementId: measurementId,\r\n    //       categoryId: categoryId,\r\n    //       frequency: patientMeasurementForm[item]\r\n    //     })\r\n    //   }\r\n    //}\r\n\r\n    patientMeasurements = patientMeasurements.length == 0 ? null : patientMeasurements;\r\n\r\n     //object that will be sent to the api\r\n     patientObject = {\r\n       patient:patient,\r\n       patientCategories:patientCategories,\r\n       patientMeasurements:patientMeasurements\r\n     }\r\n     return patientObject;\r\n\r\n  }\r\n}\r\n\r\n\r\n//TODO check for valuesbeing null beacuase can be null\r\n        // this.patient.patientCategory = [\r\n          // {\r\n          //   CategoryId: 1,\r\n          //   Urnumber: this.patientInformationForm.value.urNumber\r\n          // }\r\n        // ];\r\n\r\n        // this.patient.patientMeasurement = [\r\n          // {\r\n          //   MeasurementId:1,\r\n          //   CategoryId:1,\r\n          //   Urnumber:this.patientInformationForm.value.urNumber,\r\n          //   Frequency:1,\r\n          //   FrequencySetDate:new Date()\r\n          // }\r\n        // ]\r\n","import { Injectable } from '@angular/core';\r\nimport { IgenPasswordPatient } from '../models/patient.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PasswordService {\r\n\r\n  constructor() { }\r\n\r\n  //Initials and DOB password function for add patient\r\n  generateDefaultPassword(passwordDetails: IgenPasswordPatient){\r\n\r\n    let password:string;\r\n\r\n    if(passwordDetails.formPassword == '')\r\n    {\r\n      let fNameInitial = passwordDetails.givenName[0];\r\n      let lNameInitial = passwordDetails.familyName[0];\r\n      let dob = passwordDetails.dob;\r\n      let day = dob.slice(8,10);\r\n      let month = dob.slice(5,7);\r\n      let year = dob.slice(0,4)\r\n      password = fNameInitial+lNameInitial+day+month+year;\r\n      return password;\r\n    }\r\n\r\n    password = passwordDetails.formPassword;\r\n    return password;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\r\nimport { addPatientModel, editPatientModel, patient, patientMeasurement, searchPatientParamaterModel, ViewPatientInfoModel} from '../models/patient.model';\r\nimport { Observable, throwError  } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ViewTableDataNoUr } from '../models/measurement.model';\r\nimport { catchError, retry } from 'rxjs/operators';\r\n\r\n\r\n//for development\r\n// const url:string = \"http://localhost:5000/\"\r\n// const patientUrl:string = `${url}AdminPatient/SearchPatient`;\r\n\r\n//for deployment\r\n// const url:string = \"http://ec2-3-236-198-75.compute-1.amazonaws.com:3000/\"\r\n// const patientUrl:string = `${url}api/patient`;\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PatientDataService {\r\n  getExistingPatient(currentPatientId: any) {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  isPatient: any;\r\n\r\n  constructor(private http:HttpClient) {\r\n\r\n  }\r\n\r\n  private apiURL = environment.apiURL + \"/AdminPatient\";\r\n\r\n  //--------------------------- Patient Services ---------------------->\r\n  //<------------------------- get patients ---------------------->\r\n  //make parameters an interface or model\r\n  //use specific outputs not just any\r\n  public getSearchPatients(filter: Object){\r\n\r\n    let params = new HttpParams();\r\n    Object.keys(filter).forEach(\r\n        key => filter[key] && (params = params.append(key, filter[key]))\r\n    );\r\n\r\n    return this.http.get<object>(\r\n      `${this.apiURL}/SearchPatient`,\r\n        {\r\n            params\r\n        }\r\n    );\r\n\r\n    // try {\r\n    //   let params = new HttpParams({\r\n\r\n    //     fromObject: {\r\n    //       searchurnumber: searchPatientParamaterModel.urNumber.toString(),\r\n    //       searchgivenname: searchPatientParamaterModel.givenName.toString(),\r\n    //       searchfamilyname: searchPatientParamaterModel.familyName.toString(),\r\n    //       isExactGivenName: searchPatientParamaterModel.isExactGivenName.toString(),\r\n    //       isExactUr: searchPatientParamaterModel.isExactUrNumber.toString(),\r\n    //       isExactFamilyName: searchPatientParamaterModel.isExactFamilyName.toString(),\r\n    //     }\r\n    //   });\r\n\r\n    //   console.log(params)\r\n    //   if (params.\r\n    //   return this.http.get<patient[]>(`${this.apiURL}/SearchPatient`, {params: params});\r\n    // } catch (e){\r\n    //   console.log('Failed to Get Patients', e);\r\n    // }\r\n  }\r\n\r\n\r\n  //<---------------------------- Get All Patients -------------------------------->\r\n\r\n  public getAllPatients(): Promise<patient[]>{\r\n    return this.http.get<patient[]>(`${this.apiURL}/GetAllPatients`).toPromise();\r\n\r\n  }\r\n\r\n  //<---------------------------- Get Current Patient Data -------------------------------->\r\n\r\n  public getCurrentPatientData(urnumber: number): Observable<ViewTableDataNoUr[]>{\r\n    //TODO change the endpoint to ahlams once updated with the merge - the model should be the same\r\n\r\n    try {\r\n      let params = new HttpParams({\r\n        fromObject: {\r\n          urnumber: urnumber.toString()\r\n        }\r\n      });\r\n      return this.http.get<ViewTableDataNoUr[]>(`${this.apiURL}/ViewPatient`, {params: params});\r\n    } catch (e){\r\n      console.log('Failed to Get Patients', e);\r\n    }\r\n\r\n\r\n  }\r\n  //<---------------------------- Get Current Patient Information for Data Table Header -------------------------------->\r\n\r\n  public getCurrentPatientDataInfo(urnumber: number): Observable<ViewPatientInfoModel>{\r\n    //TODO change the endpoint to ahlams once updated with the merge - the model should be the same\r\n\r\n    try {\r\n      let params = new HttpParams({\r\n        fromObject: {\r\n          urnumber: urnumber.toString()\r\n        }\r\n      });\r\n\r\n      return this.http.get<ViewPatientInfoModel>(`${this.apiURL}/ViewPatientInfo`, {params: params});\r\n    } catch (e){\r\n      console.log('Failed to Get Patients', e);\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  //  <---------------------------- Add Patient -------------------------------------->\r\n\r\n\r\n  addPatient(patient: addPatientModel) {\r\n    return this.http.post(`${this.apiURL}/AddPatient`, patient)\r\n    .pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  public handleError(error: HttpErrorResponse) {\r\n    if (error.status === 0) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error);\r\n      return throwError(\r\n        'server error');\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong.\r\n      console.error(\r\n        `Backend returned code ${error.status}, body was: `, error.error);\r\n        return throwError(\r\n          false);\r\n    }\r\n    // // Return an observable with a user-facing error message.\r\n    // return throwError(\r\n    //   false);\r\n  }\r\n\r\n  //<-------------------------- Get Patient By ID ----------------------------------------->\r\n  getPatient(urNumber:string): Observable<patient>{\r\n    const params = new HttpParams({\r\n      fromObject: {\r\n        urnumber: urNumber.toString()\r\n      }\r\n    });\r\n    return this.http.get<patient>(`${this.apiURL}/GetPatient`, {params: params});\r\n  }\r\n\r\n   //<---------------------------- Get Patient to  Edit ------------------------------------------->\r\n   editPatientGet(urNumber:any): Promise<editPatientModel>{\r\n    return this.http.get<editPatientModel>(`${this.apiURL}/GetPatient?urnumber=${urNumber}`).toPromise();\r\n  }\r\n\r\n  // //<---------------------------- Edit Patient ------------------------------------------->\r\n  // editPatientPut(urNumber:any, newPatient:editPatientModel):Observable<any>{\r\n  //   try{\r\n  //     return this.http.put<any>(`${this.apiURL}/updatePatient/${urNumber}`,newPatient)\r\n  //   } catch (e){\r\n  //     console.log('Failed to edit patient',e);\r\n  //   }\r\n  // }\r\n\r\n//---------------------------- Edit Patient -------------------------------------------------//\r\n  editPatient(patientObject: editPatientModel) {\r\n    console.log(patientObject)\r\n  return this.http.post<editPatientModel>(`${this.apiURL}/EditPatient`, patientObject)\r\n}\r\n\r\n\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiURL:'http://nhrmipc.somee.com/publish'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"names":[],"sourceRoot":"webpack:///"}